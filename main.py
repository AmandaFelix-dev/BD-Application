from database import HQDatabase
from models import criar_banco, escrever_log

def mostrar_menu():
    print("\n--- CAT√ÅLOGO DE HQs ---")
    print("1. üìã Gerenciar Editoras")
    print("2. üé¨ Gerenciar S√©ries")
    print("3. üóÉÔ∏è  Gerenciar Edi√ß√µes")
    print("4. üìä Relat√≥rios")
    print("0. üöÄ Sair")

def menu_editoras(db):
    while True:
        print("\n--- EDITORAS ---")
        print("1. üìå Cadastrar nova editora")
        print("2. üìÑ Listar todas as editoras")
        print("3. ‚úèÔ∏è  Atualizar editora")
        print("4. ‚ùå Excluir editora")
        print("0. ‚Ü©Ô∏è  Voltar")
        
        opcao = input("‚úçÔ∏è ü§ì  Escolha: ")
        
        if opcao == "1":
            nome = input("Nome da editora: ")
            pais = input("Pa√≠s de origem (opcional): ")
            if db.inserir_editora(nome, pais if pais else None):
                print("‚úÖ Editora cadastrada com sucesso!")
        
        elif opcao == "2":
            editoras = db.listar_editoras()
            print("\n--- EDITORAS CADASTRADAS ---")
            for ed in editoras:
                print(f"ID: {ed[0]} | Nome: {ed[1]} | Pa√≠s: {ed[2] or 'N√£o informado'}")
        
        elif opcao == "3":
            editoras = db.listar_editoras()
            if not editoras:
                print("Nenhuma editora cadastrada!")
                continue
                
            print("\nEditoras dispon√≠veis:")
            for ed in editoras:
                print(f"{ed[0]} - {ed[1]}")
                
            id = input("ID da editora a atualizar: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            editora = db.buscar_editora(int(id))
            if not editora:
                print("Editora n√£o encontrada!")
                continue
                
            print(f"\nEditando editora: {editora[1]}")
            novo_nome = input(f"Novo nome [{editora[1]}]: ") or editora[1]
            novo_pais = input(f"Novo pa√≠s [{editora[2] or 'N√£o informado'}]: ") or editora[2]
            
            if db.atualizar_editora(id, novo_nome, novo_pais):
                print("‚úÖ Editora atualizada com sucesso!")
        
        elif opcao == "4":
            editoras = db.listar_editoras()
            if not editoras:
                print("Nenhuma editora cadastrada!")
                continue
                
            print("\nEditoras dispon√≠veis:")
            for ed in editoras:
                print(f"{ed[0]} - {ed[1]}")
                
            id = input("ID da editora a excluir: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            if db.excluir_editora(int(id)):
                print("‚úÖ Editora exclu√≠da com sucesso!")
            else:
                print("‚ùå N√£o foi poss√≠vel excluir (possui s√©ries associadas)")
        
        elif opcao == "0":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_series(db):
    while True:
        print("\n--- S√âRIES ---")
        print("1. üìå Cadastrar nova s√©rie")
        print("2. üìÑ Listar s√©ries por editora")
        print("3. üìÑ Listar todas as s√©ries")
        print("4. ‚úèÔ∏è  Atualizar s√©rie")
        print("5. ‚ùå Excluir s√©rie")
        print("0. ‚Ü©Ô∏è  Voltar")
        
        opcao = input("‚úçÔ∏è ü§ì Escolha: ")
        
        if opcao == "1":
            titulo = input("T√≠tulo da s√©rie: ")
            editoras = db.listar_editoras()
            if not editoras:
                print("Nenhuma editora cadastrada! Cadastre uma editora primeiro.")
                continue
                
            print("\nEditoras dispon√≠veis:")
            for ed in editoras:
                print(f"{ed[0]} - {ed[1]}")
                
            editora_id = input("ID da editora: ")
            if not editora_id.isdigit():
                print("ID inv√°lido!")
                continue
                
            ano = input("Ano de lan√ßamento (opcional): ")
            status = input("Status (Ativa/Conclu√≠da/Cancelada) [Ativa]: ") or "Ativa"
            
            if db.inserir_serie(titulo, editora_id, ano if ano else None, status):
                print("‚úÖ S√©rie cadastrada com sucesso!")
        
        elif opcao == "2":
            editoras = db.listar_editoras()
            if not editoras:
                print("Nenhuma editora cadastrada!")
                continue
                
            print("\nEditoras dispon√≠veis:")
            for ed in editoras:
                print(f"{ed[0]} - {ed[1]}")
                
            editora_id = input("ID da editora para filtrar: ")
            if not editora_id.isdigit():
                print("ID inv√°lido!")
                continue
                
            series = db.listar_series(editora_id)
            print("\n--- S√âRIES ---")
            for serie in series:
                print(f"ID: {serie[0]} | T√≠tulo: {serie[1]} | Editora: {serie[2]} | Ano: {serie[3] or 'N/I'} | Status: {serie[4]}")
        
        elif opcao == "3":
            series = db.listar_series()
            print("\n--- TODAS AS S√âRIES ---")
            for serie in series:
                print(f"ID: {serie[0]} | T√≠tulo: {serie[1]} | Editora: {serie[2]} | Ano: {serie[3] or 'N/I'} | Status: {serie[4]}")
        
        elif opcao == "4":
            series = db.listar_series()
            if not series:
                print("Nenhuma s√©rie cadastrada!")
                continue
                
            print("\nS√©ries dispon√≠veis:")
            for serie in series:
                print(f"{serie[0]} - {serie[1]}")
                
            id = input("ID da s√©rie a atualizar: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            serie = db.buscar_serie(id)
            if not serie:
                print("S√©rie n√£o encontrada!")
                continue
                
            print(f"\nEditando s√©rie: {serie[1]}")
            novo_titulo = input(f"Novo t√≠tulo [{serie[1]}]: ") or serie[1]
            
            editoras = db.listar_editoras()
            print("\nEditoras dispon√≠veis:")
            for ed in editoras:
                print(f"{ed[0]} - {ed[1]}")
            nova_editora = input(f"Nova editora ID [{serie[2]}]: ") or serie[2]
            
            novo_ano = input(f"Novo ano [{serie[3] or 'N/I'}]: ") or serie[3]
            novo_status = input(f"Novo status [{serie[4]}]: ") or serie[4]
            
            if db.atualizar_serie(id, novo_titulo, nova_editora, novo_ano, novo_status):
                print("‚úÖ S√©rie atualizada com sucesso!")
        
        elif opcao == "5":
            series = db.listar_series()
            if not series:
                print("Nenhuma s√©rie cadastrada!")
                continue
                
            print("\nS√©ries dispon√≠veis:")
            for serie in series:
                print(f"{serie[0]} - {serie[1]}")
                
            id = input("ID da s√©rie a excluir: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            if db.excluir_serie(int(id)):
                print("‚úÖ S√©rie exclu√≠da com sucesso!")
            else:
                print("‚ùå N√£o foi poss√≠vel excluir (possui edi√ß√µes associadas)")
        
        elif opcao == "0":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_edicoes(db):
    while True:
        print("\n--- EDI√á√ïES ---")
        print("1. üìå Cadastrar nova edi√ß√£o")
        print("2. üìÑ Listar edi√ß√µes por s√©rie")
        print("3. üìÑ Listar todas as edi√ß√µes")
        print("4. ‚úèÔ∏è  Atualizar edi√ß√£o")
        print("5. üì¶ Atualizar estoque")
        print("6. ‚ùå Excluir edi√ß√£o")
        print("0. ‚Ü©Ô∏è  Voltar")
        
        opcao = input("‚úçÔ∏è ü§ì Escolha: ")
        
        if opcao == "1":
            series = db.listar_series()
            if not series:
                print("Nenhuma s√©rie cadastrada! Cadastre uma s√©rie primeiro.")
                continue
                
            print("\nS√©ries dispon√≠veis:")
            for serie in series:
                print(f"{serie[0]} - {serie[1]}")
                
            serie_id = input("ID da s√©rie: ")
            if not serie_id.isdigit():
                print("ID inv√°lido!")
                continue
                
            numero = input("N√∫mero da edi√ß√£o: ")
            if not numero.isdigit():
                print("N√∫mero inv√°lido!")
                continue
                
            titulo_edicao = input("T√≠tulo da edi√ß√£o (opcional): ")
            data_publicacao = input("Data de publica√ß√£o (AAAA-MM-DD, opcional): ")
            preco_original = input("Pre√ßo original (opcional): ")
            preco_atual = input("Pre√ßo atual (opcional): ")
            quantidade = input("Quantidade em estoque [0]: ") or "0"
            
            try:
                preco_original = float(preco_original) if preco_original else None
                preco_atual = float(preco_atual) if preco_atual else None
                quantidade = int(quantidade)
            except ValueError:
                print("Valor inv√°lido para pre√ßo ou quantidade!")
                continue
                
            if db.inserir_edicao(serie_id, numero, titulo_edicao or None, 
                                data_publicacao or None, preco_original, 
                                preco_atual, quantidade):
                print("‚úÖ Edi√ß√£o cadastrada com sucesso!")
        
        elif opcao == "2":
            series = db.listar_series()
            if not series:
                print("Nenhuma s√©rie cadastrada!")
                continue
                
            print("\nS√©ries dispon√≠veis:")
            for serie in series:
                print(f"{serie[0]} - {serie[1]}")
                
            serie_id = input("ID da s√©rie para filtrar: ")
            if not serie_id.isdigit():
                print("ID inv√°lido!")
                continue
                
            edicoes = db.listar_edicoes(serie_id)
            print("\n--- EDI√á√ïES ---")
            for ed in edicoes:
                print(f"ID: {ed[0]} | N¬∫: {ed[1]} | T√≠tulo: {ed[2] or 'N/I'} | "
                      f"Publica√ß√£o: {ed[3] or 'N/I'} | Pre√ßo: R${ed[4] or '0.00'} | "
                      f"Estoque: {ed[5]}")
        
        elif opcao == "3":
            edicoes = db.listar_edicoes()
            print("\n--- TODAS AS EDI√á√ïES ---")
            for ed in edicoes:
                print(f"ID: {ed[0]} | N¬∫: {ed[1]} | S√©rie: {ed[2]} | "
                      f"T√≠tulo: {ed[3] or 'N/I'} | Pre√ßo: R${ed[4] or '0.00'} | "
                      f"Estoque: {ed[5]}")
        
        elif opcao == "4":
            edicoes = db.listar_edicoes()
            if not edicoes:
                print("Nenhuma edi√ß√£o cadastrada!")
                continue
                
            print("\nEdi√ß√µes dispon√≠veis:")
            for ed in edicoes:
                print(f"{ed[0]} - {ed[2]} #{ed[1]}")
                
            id = input("ID da edi√ß√£o a atualizar: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            edicao = db.buscar_edicao(id)
            if not edicao:
                print("Edi√ß√£o n√£o encontrada!")
                continue
                
            print(f"\nEditando edi√ß√£o #{edicao[1]} da s√©rie {edicao[7]}")
            novo_numero = input(f"Novo n√∫mero [{edicao[1]}]: ") or edicao[1]
            novo_titulo = input(f"Novo t√≠tulo [{edicao[2] or 'N/I'}]: ") or edicao[2]
            nova_data = input(f"Nova data (AAAA-MM-DD) [{edicao[3] or 'N/I'}]: ") or edicao[3]
            novo_preco_original = input(f"Novo pre√ßo original [{edicao[4] or 'N/I'}]: ") or edicao[4]
            novo_preco_atual = input(f"Novo pre√ßo atual [{edicao[5] or 'N/I'}]: ") or edicao[5]
            
            try:
                novo_numero = int(novo_numero)
                novo_preco_original = float(novo_preco_original) if novo_preco_original else None
                novo_preco_atual = float(novo_preco_atual) if novo_preco_atual else None
            except ValueError:
                print("Valor inv√°lido para n√∫mero ou pre√ßo!")
                continue
                
            if db.atualizar_edicao(id, numero=novo_numero, titulo_edicao=novo_titulo,
                                  data_publicacao=nova_data, preco_original=novo_preco_original,
                                  preco_atual=novo_preco_atual):
                print("‚úÖ Edi√ß√£o atualizada com sucesso!")
        
        elif opcao == "5":
            edicoes = db.listar_edicoes()
            if not edicoes:
                print("Nenhuma edi√ß√£o cadastrada!")
                continue
                
            print("\nEdi√ß√µes dispon√≠veis:")
            for ed in edicoes:
                print(f"{ed[0]} - {ed[2]} #{ed[1]} (Estoque: {ed[5]})")
                
            id = input("ID da edi√ß√£o para atualizar estoque: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            edicao = db.buscar_edicao(id)
            if not edicao:
                print("Edi√ß√£o n√£o encontrada!")
                continue
                
            print(f"\nEdi√ß√£o #{edicao[1]} - {edicao[7]}")
            print(f"Estoque atual: {edicao[6]}")
            nova_quantidade = input("Nova quantidade: ")
            
            try:
                nova_quantidade = int(nova_quantidade)
            except ValueError:
                print("Quantidade inv√°lida!")
                continue
                
            if db.atualizar_edicao(id, quantidade_estoque=nova_quantidade):
                print("‚úÖ Estoque atualizado com sucesso!")
        
        elif opcao == "6":
            edicoes = db.listar_edicoes()
            if not edicoes:
                print("Nenhuma edi√ß√£o cadastrada!")
                continue
                
            print("\nEdi√ß√µes dispon√≠veis:")
            for ed in edicoes:
                print(f"{ed[0]} - {ed[2]} #{ed[1]}")
                
            id = input("ID da edi√ß√£o a excluir: ")
            if not id.isdigit():
                print("ID inv√°lido!")
                continue
                
            if db.excluir_edicao(int(id)):
                print("‚úÖ Edi√ß√£o exclu√≠da com sucesso!")
        
        elif opcao == "0":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_relatorios(db):
    while True:
        print("\n--- RELAT√ìRIOS ---")
        print("1. üìâ Estoque baixo")
        print("2. üìä S√©ries por status")
        print("3. üìú Hist√≥rico de logs")
        print("0. ‚Ü©Ô∏è  Voltar")
        
        opcao = input("‚úçÔ∏è ü§ì Escolha: ")
        
        if opcao == "1":
            limite = input("Limite para estoque baixo [5]: ") or "5"
            try:
                limite = int(limite)
            except ValueError:
                print("Valor inv√°lido!")
                continue
                
            estoque_baixo = db.estoque_baixo(limite)
            print("\n--- EDI√á√ïES COM ESTOQUE BAIXO ---")
            for ed in estoque_baixo:
                print(f"ID: {ed[0]} | N¬∫: {ed[1]} | S√©rie: {ed[2]} | Estoque: {ed[3]}")
        
        elif opcao == "2":
            series_status = db.series_por_status()
            print("\n--- S√âRIES POR STATUS ---")
            for status in series_status:
                print(f"{status[0]}: {status[1]}")
        
        elif opcao == "3":
            logs = db.historico_logs()
            print("\n--- √öLTIMOS REGISTROS DE LOG ---")
            for log in logs:
                print(f"{log[0]} | {log[1]}.{log[2]} ID {log[3]} | {log[4] or ''}")
        
        elif opcao == "0":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def main():
    criar_banco()
    db = HQDatabase()
    
    while True:
        mostrar_menu()
        opcao = input("üòé Escolha uma op√ß√£o: ")
        
        if opcao == "1":
            menu_editoras(db)
        elif opcao == "2":
            menu_series(db)
        elif opcao == "3":
            menu_edicoes(db)
        elif opcao == "4":
            menu_relatorios(db)
        elif opcao == "0":
            db.close()
            print("ü§ñ Saindo do sistema...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()